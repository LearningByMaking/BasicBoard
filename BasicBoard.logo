;jlogo file for BasicBoard
 
 to BasicBoard
 	print "|starting BasicBoard|
 	init-BasicBoard
 	loop
 	[
 		see-packet
 		wait 150
 	]
 end
 
 to init-BasicBoard
  init-hardware 
 	make "check 0
  make "oldcheck 0
  make "time-list []
  make "light-list []
  make "start-time int ( now / 1000 ) ;accurate to within 1 second
 end
 
 to init-hardware
 	stopvm ;stop vm makes sure the board is not running
 	ul-power
 	wait 15
 	ul-init
 	wait 15
 	ul-go
 	wait 15
 end 

 
 to see-packet
  make "packet-bytes retrieve-packet   ;reads the packet off the one-wire network from the app board
  if (count :packet-bytes) > 0 ;make sure packet is not empty
	[
		process-header            
	]
    
end


to process-header

  make "oldcheck :check ;copy value from new check to old
  let [nws ((first :packet-bytes) / 2) + 1]  ;the checksum is the very last byte in the packet
  make "check wnth :nws :packet-bytes ;checksum is the last byte in the packet
  if not (:check = :oldcheck) ;if checksums are equal, the data is NOT new
  [
    make "type nth 1 :packet-bytes ;pull type information out of packet       
    if (:type = 42) [ process-data-packet ] ;42 is the type we defined on the app board
  ]
end

to process-data-packet 
  print :packet-bytes ;print the raw paclet data
	
  make "light wnth 4 :packet-bytes  ;read the 1st non header word from the packet (light)
	make "temp1 wnth 5 :packet-bytes  ;read the 2nd non header word from the packet (temp)
	make "temp2 wnth 6 :packet-bytes  ;read the 3rd non header word from the packet (temp)
	make "time elapsedTime
	
  print (se "|light:| :light "|temp1:| :temp1 "|temp2:| :temp2 "|time:| :time) ;print values 
  
  addTimeToList :time ;add time values for plotting
 	addLightToList :light ;add light values for plotting
 	plot-light

end

to plot-light
   x-data "|Elapsed Time (seconds)| :time-list
   y-data "|Light (adc unit)|       :light-list 
   plot 2
   if(:firstrun = 1)
   [
      display 
   ]
  
end

to wnth :i :l ;pull the nth word out of a packet
  output (nth 2 * :i :l) + 256 * (nth 2 * :i + 1 :l)
end

to elapsedTime ;calculate time since the experiment started
   output  int ( now / 1000 ) - :start-time
end

to addTimeToList :time
  make "time-list (se :time-list :time)
end

to addLightToList :photo
  make "light-list (se :light-list :photo)
end

to x-data :n :m
  make "xname :n
  make "xcol-data :m
end

to y-data :n :m
  make "yname :n
  make "ycol-data :m
end

to plot :s
  setup-screen
  clean
  select-all
  limits xlower xupper ylower yupper 
  grid 10 10
  box
  xaxis 10  1
  yaxis 10  1

  if :s = 0 [ histogram ]
  if :s = 1 [ connect ]
  if :s = 2 [ ptype 2 points ]

  title (se :yname "versus :xname)
  xlabel :xname
  redraw

end

to display  
  blindexec "|display -update 1 screen.png | 
  make "firstrun 0 
end

to retrieve-packet ;reads the packet from the pre-assigned memory location on the MSP430
   output rl $1fc0 30 
end